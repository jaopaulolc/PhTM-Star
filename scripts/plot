#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1
source $PWD/scripts/genPlotData

function plot-clustered-lines {
	local tmpdatafile=$1
	local graphfilename=$2
	local ylabel=$3
	local _APPS=${!4//_/-}
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#C5604B"
		set style line 2 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#97BE53"
		set style line 3 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#A564B7"
		set style line 4 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#93B9B5"
		set style line 5 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#544442"
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set ylabel "$ylabel" offset 1.8
		set xlabel "  " offset 1

		apps = "$_APPS"
		set for[i=1:words(apps)] label word(apps,i) at (2.0*i-1.0)*($NLINES/2.0), graph -0.12 center

		plot for[j=2:$NCOLUMNS:2] "$tmpdatafile" index 0 u (column(0)+1):j:xtic(1) w lp ls j/2 \
			$(APPS=$(echo $_APPS | sed 's|^[a-z-]\+ \?||'); i=1;
				for app in $APPS; do
					echo -n 'notitle, for[j=2:'$NCOLUMNS':2] "'$tmpdatafile'" index '$i' u ('$NLINES'*'$i' + column(0)):j:xtic(1) w lp ls j/2 ';
					i=$((i+1))
				done
				echo -n 't column(j)'
			)
																	
		set terminal pop
		set output
	EOF
}

function plot-txcycles {
	tmpdatafile=$1
	graphfilename=$2
	ylabel=$3
	xlabel=$4
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#C5604B"
		set style line 2 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#97BE53"
		set style line 3 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#A564B7"
		set style line 4 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#93B9B5"
		set style line 5 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#544442"
		
		#set xtics out nomirror
		unset xtics
		set ytics out nomirror
		set grid y
		unset key

		set ylabel "$ylabel" offset 1.8
		set xlabel "$xlabel" offset 0,-1.5
		#set xlabel " " offset 1

		apps = "$_STAMP_APPS"
		set for[i=1:words(apps)] label word(apps,i) at (2*i-1)*2.95,-5.00 center

		#plot for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):2:xtic(sprintf("%d",column(0))) w lp ls j+1 notitle
		plot for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):2 w lp ls j+1 notitle, \
		     for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):(\$2 > 20.0 ? (\$2 + 5.0) :1/0):(sprintf("%0.2f",\$3)) w labels

		set terminal pop
		set output
	EOF
}

function plot-clustered-bars {
	local tmpdatafile=$1
	local graphfilename=$2
	local ylabel=$3
	local _APPS=${!4//_/-}
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 1.20*$(echo $_APPS | wc -w),2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#66A61E"
		set style line 2 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#E7298A"
		set style line 3 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#1623DD"
		set style line 4 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#EA6507"
		set style line 5 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#D01E1E"
		
		set style data histogram
		set style histogram clustered gap 0.2 title offset 1.2,-0.4
		set style fill solid border -1
		set boxwidth 0.9
		set style fill solid border -1
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set tmargin 1.5
		$KEY_POSITION
		set ylabel "$ylabel" offset 1.8
		set xlabel "  " offset 1

		apps = "$_APPS"

		plot newhistogram " ".word(apps,1), for[j=2:$NCOLUMNS:2] "$tmpdatafile" index 0 u j:xtic(1) ls j/2 \
			$(APPS=$(echo $_APPS | sed 's|^[a-z-]\+ \?||'); i=1;
				for app in $APPS; do
					echo -n 'notitle, newhistogram "'$app'", for[j=2:'$NCOLUMNS':2] "'$tmpdatafile'" index '$i' u j:xtic(1) ls j/2 ';
					i=$((i+1))
				done
				echo -n 't column(j)'
			)

		set terminal pop
		set output
	EOF
}

function plot-clustered-bars2 {
	local tmpdatafile1=$1
	local tmpdatafile2=$2
	local graphfilename=$3
	local ylabel1=$4
	local ylabel2=$5
	local _APPS=${!6//_/-}
	local WIDTH=${7}
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size $WIDTH*$(echo $_APPS | wc -w),2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
		set multiplot layout 1,2
	
		# estilo das linhas
		set style line 1 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#66A61E"
		set style line 2 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#E7298A"
		set style line 3 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#1623DD"
		set style line 4 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#EA6507"
		set style line 5 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#D01E1E"
		
		set style data histogram
		set style histogram clustered gap 0.2 title offset 1.2,-0.4
		set style fill solid border -1
		set boxwidth 0.9
		set style fill solid border -1
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set tmargin 1.5
		$KEY_POSITION
		set ylabel "$ylabel1" offset 1.8
		set xlabel "  " offset 1

		apps = "$_APPS"

		plot newhistogram " ".word(apps,1), for[j=2:$NCOLUMNS:2] "$tmpdatafile1" index 0 u j:xtic(1) ls j/2 \
			$(APPS=$(echo $_APPS | sed 's|^[a-z-]\+ \?||'); i=1;
				for app in $APPS; do
					echo -n 'notitle, newhistogram "'$app'", for[j=2:'$NCOLUMNS':2] "'$tmpdatafile1'" index '$i' u j:xtic(1) ls j/2 ';
					i=$((i+1))
				done
				echo -n 't column(j)'
			)
		
		set lmargin -2.5
		set ylabel "$ylabel2" offset 1.8
		unset key
		
		plot newhistogram " ".word(apps,1), for[j=2:$NCOLUMNS:2] "$tmpdatafile2" index 0 u j:xtic(1) ls j/2 \
			$(APPS=$(echo $_APPS | sed 's|^[a-z-]\+ \?||'); i=1;
				for app in $APPS; do
					echo -n 'notitle, newhistogram "'$app'", for[j=2:'$NCOLUMNS':2] "'$tmpdatafile2'" index '$i' u j:xtic(1) ls j/2 ';
					i=$((i+1))
				done
				echo -n 't column(j)'
			)
		
		unset multiplot

		set terminal pop
		set output
	EOF
}

function plot-per-tx-capacity {
	local capacityfile=$1
	local speedupfile=$2
	local graphfilename=$3
	local ylabel=$4
	local xlabel=$5
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
		set multiplot layout 1,2
	
		# estilo das linhas
		set style line 1 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#8C1717" #scarlet
		set style line 2 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#00688B" #deepskyblue4
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set ylabel "$ylabel" offset 1.8
		set xlabel "$xlabel" offset 0,-1.5

		set size 0.6,1
		set origin 0.0, 0

		plot "$capacityfile" u 1 w p t "Read-Set Size" ls 2, "" u 2 w p t "Write-Set Size" ls 1

		set size 0.4, 1
		set origin 0.6, 0
		
		set style data histogram
		set style histogram clustered gap 0.2
		set style fill solid border -1
		set boxwidth 0.9
		set style fill solid border -1

		set ylabel "Speedup" offset 1.8
		set xlabel "  " offset 1
		
		plot for[j=2:4:2] "$speedupfile" u j:xtic(1) ls j/2

		unset multiplot

		set terminal pop
		set output
	EOF
}


function plot {
	
	[ -d $GRAPHDIR ] || mkdir $GRAPHDIR
	
	test -z "$_BUILDS"            && _BUILDS=$BUILDS
	test -z "$_NTHREADS"          && _NTHREADS=$NTHREADS
	test -z "$_MEMALLOCS"         && _MEMALLOCS='ptmalloc'
	test "$_MEMALLOCS" == "ALL"   && _MEMALLOCS=$MEMALLOCS
	test -z "$_GOVERNORS"         && _GOVERNORS='ondemand'
	test "$_GOVERNORS" == "ALL"   && _GOVERNORS=$GOVERNORS
	test -z "$_tinySTM_DESIGNS"   && _tinySTM_DESIGNS=$tinySTM_DESIGNS
	test -z "$_tinySTM_CMS"       && _tinySTM_CMS=$tinySTM_CMS
	test -z "$_ORT_HASHES"        && _ORT_HASHES="ORIGINAL"
	test "$_ORT_HASHES" == "ALL"  && _ORT_HASHES=$ORT_HASHES
	test -z "$_rtm_CMS"           && _rtm_CMS=$rtm_CMS
	test -z "$_tsx_LOCKS"         && _tsx_LOCKS=$tsx_LOCKS
	test "$_STAMP_APPS" == "ALL"  && _STAMP_APPS=$STAMP_APPS
	test "$_MICROBENCH_APPS" == "ALL" && _MICROBENCH_APPS=$MICROBENCH_APPS
	test -z "$_INITSIZES"         && _INITSIZES=$INITSIZES
	test -z "$_UPDATERATES"       && _UPDATERATES=$UPDATERATES

	case $PLOTSTYLE in
		stamp-TimeAndSpeedupAndEnergy)
			for dataplot in speedup energy time; do
				local tmpfile="data.tmp"
				case $dataplot in
					speedup)
						local yaxislabel='Speedup (relação ao sequencial)' ;;
					energy)
						local yaxislabel='Energia (J) (normalizada)';;
					time)
						local yaxislabel='Tempo de Execução' ;;
				esac
				generate_data "$dataplot" "_STAMP_APPS" "_NTHREADS"
				for suffix in ${SUFFIXES}; do
					[ "$suffix" == '@' ] && suffix=''
					rm -f $tmpfile
					for prefix in ${PREFIXES}; do
						cat $DATADIR/${prefix}${suffix}.$dataplot | \
							sed 's|norec|NOrec|g;s|rtm[^"]\+|RTM|g;s|lock|LOCK|g' >> $tmpfile
						NLINES="$(wc -l $DATADIR/${prefix}${suffix}.$dataplot | cut -d' ' -f1)"
						echo -e "\n" >> $tmpfile
					done # FOR EACH PREFIX
					NCOLUMNS="$(head -n1 $tmpfile | awk -F ' "' 'END{print NF}')"
					KEY_POSITION="set key right nobox"
					#KEY_POSITION="set key left nobox"
					local prefix=$(echo $prefix | sed 's|^[a-z]\+-\?||')
					plot-clustered-lines "$tmpfile" "stamp-${dataplot}${prefix}${suffix}"     "$yaxislabel" "_STAMP_APPS"
					plot-clustered-bars  "$tmpfile" "stamp-bar-${dataplot}${prefix}${suffix}" "$yaxislabel" "_STAMP_APPS"
					rm -f $tmpfile
				done # FOR EACH SUFFIX
			done # FOR EACH DATA PLOT
			;;
		microbench-ThroughputVsContention)
			local throughputfile="throughput.tmp"
			generate_data "throughput" "_MICROBENCH_APPS" "_UPDATERATES"
			for suffix in ${SUFFIXES}; do
				[ "$suffix" == '@' ] && suffix=''
				rm -f $throughputfile
				for prefix in ${PREFIXES}; do
					cat $DATADIR/${prefix}${suffix}.throughput >> $throughputfile
					NLINES="$(wc -l $DATADIR/${prefix}${suffix}.throughput | cut -d' ' -f1)"
					echo -e "\n" >> $throughputfile
				done # FOR EACH PREFIX
				NCOLUMNS="$(head -n1 $throughputfile | awk -F ' "' 'END{print NF}')"
				KEY_POSITION="set key right nobox"
				prefix=$(echo $prefix | sed 's|^[a-z_]\+-\?||')
				plot-clustered-lines "$throughputfile" "microbench-throughput${prefix}${suffix}"     "Throughput" "_MICROBENCH_APPS"
				plot-clustered-bars  "$throughputfile" "microbench-bar-throughput${prefix}${suffix}" "Throughput" "_MICROBENCH_APPS"
				rm -f $throughputfile
			done # FOR EACH SUFFIX
			;;
		microbench-CommitsAndConflictsVsContention)
			local commitsfile="commits.tmp"
			local conflictsfile="conflicts.tmp"
			generate_data "commits" "_MICROBENCH_APPS" "_UPDATERATES"
			generate_data "conflicts" "_MICROBENCH_APPS" "_UPDATERATES"
			for suffix in ${SUFFIXES}; do
				[ "$suffix" == '@' ] && suffix=''
				rm -f $commitsfile
				rm -f $conflictsfile
				for prefix in ${PREFIXES}; do
					cat $DATADIR/${prefix}${suffix}.commits >> $commitsfile
					cat $DATADIR/${prefix}${suffix}.conflicts >> $conflictsfile
					NLINES="$(wc -l $DATADIR/${prefix}${suffix}.commits | cut -d' ' -f1)"
					echo -e "\n" >> $commitsfile
					echo -e "\n" >> $conflictsfile
				done # FOR EACH PREFIX
				NCOLUMNS="$(head -n1 $commitsfile | awk -F ' "' 'END{print NF}')"
				KEY_POSITION="set key right nobox"
				prefix=$(echo $prefix | sed 's|^[a-z_]\+-\?||')
				plot-clustered-bars2  "$commitsfile" "$conflictsfile" "microbench-bar${prefix}${suffix}" "Throughput" "Conflicts" "_MICROBENCH_APPS" "8.0"
				rm -f $commitsfile
				rm -f $conflictsfile
			done # FOR EACH SUFFIX
			;;
		tinystm-falseConflict)
			tmpfalseConflictfile="falseConflict.tmp"
			tmpfalseConfRatiofile="falseConfRatio.tmp"
			generate_data
			for suffix in ${SUFFIXES}; do
				[ "$suffix" == '@' ] && suffix=''
				rm -f $tmpfalseConflictfile
				rm -f $tmpfalseConfRatiofile
				for prefix in ${PREFIXES}; do
					cat $DATADIR/${prefix}${suffix}.falseConflict  >> $tmpfalseConflictfile
					cat $DATADIR/${prefix}${suffix}.falseConfRatio >> $tmpfalseConfRatiofile
					echo -e "\n" >> $tmpfalseConflictfile
					echo -e "\n" >> $tmpfalseConfRatiofile
				done # FOR EACH PREFIX
				NCOLUMNS="$(head -n1 $tmpfalseConflictfile | awk -F ' "' 'END{print NF}')"
				KEY_POSITION="set key outside right nobox horizontal"
				prefix=$(echo $prefix | sed 's|^[a-z]\+-\?||')
				plot-stamp-bar "$tmpfalseConflictfile"  "stamp-falseConflict${prefix}${suffix}"  "N. Conflitos Falsos"
				plot-stamp-bar "$tmpfalseConfRatiofile" "stamp-falseConfRatio${prefix}${suffix}" "% Conflitos Falsos"
				rm -f $tmpfalseConflictfile
				rm -f $tmpfalseConfRatiofile
			done # FOR EACH SUFFIX
			;;
		stamp-aborts)
			echo "not implemented yet!" && exit -1
			;;
		per-tx-capacity)
			[ -d $DATADIR ] || mkdir $DATADIR
			for build in ${_BUILDS}; do
				[ $build == "norec" ] \
					&& SUFFIXES=$(cross_product norec "${_GOVERNORS}" "${_MEMALLOCS}" "${_NTHREADS}")
				[ $build == "tinystm" ] \
					&& SUFFIXES=$(cross_product tinystm "${_tinySTM_DESIGNS}" "${_tinySTM_CMS}" "${_ORT_HASHES}" "${_MEMALLOCS}" "${_NTHREADS}")
				for app in ${_STAMP_APPS}; do
					for suffix in ${SUFFIXES}; do
						logfile=$LOGDIR/$app-$suffix.log
						setsizefile=$DATADIR/$app-$suffix
						cat $logfile | awk -vapp=$setsizefile -f scripts/genSetSizeFile.awk
						for txfile in $(ls $DATADIR/$app-$suffix-tx*.setsize); do
							nTx=$(echo $txfile | awk '{match($i, /(tx[0-9]+)/, tx); print tx[1]}')
							speedupfile=$(eval echo $DATADIR/$app*.speedup);
							plot-per-tx-capacity "$txfile" "$speedupfile" "$app-$suffix-$nTx" "Número de Elementos" "Tempo"
						done # FOR EACH TXFILE
					done # FOR EACH SUFFIX
				done # FOR EACH PREFIX
			done # FOR EACH BUILD
			;;
		stamp-txcycles)
			tmpfile=commits.tmp
			for build in ${_BUILDS}; do
				SUFFIXES=$build
				test $build == 'tinystm' && \
					SUFFIXES="$(eval echo -n $build-{${_tinySTM_DESIGNS// /,}}-{${_tinySTM_CMS// /,}} | sed 's|{||g;s|}||g')"
				test $build == 'rtm' && \
					SUFFIXES="$(eval echo -n $build-{${_rtm_CMS// /,}}-{${_tsx_LOCKS// /,}} | sed 's|{||g;s|}||g')"
				SUFFIXES="$(eval echo -n {${SUFFIXES// /,}}-{${_GOVERNORS// /,}} | sed 's|{||g;s|}||g')"
				SUFFIXES="$(eval echo -n {${SUFFIXES// /,}}-{${_MEMALLOCS// /,}} | sed 's|{||g;s|}||g')"
				for suffix in ${SUFFIXES}; do
					for t in ${_NTHREADS}; do
						rm -f $tmpfile
						for app in $STAMP_APPS; do
							proffile="$DATADIR/$app-$suffix-$t.prof"
							if [ ! -e $proffile ]; then
								colselection="5p;3p"
								[ "$build" == "rtm" ] && colselection="7p;3p"
								./scripts/genPlotData2 -p colselection -c $colselection -a $app -s "$suffix-$t"
							fi
							nlines=$(wc -l $proffile | cut -d' ' -f1)
							awk -v nlines=$nlines '{$1=($1+1)*(5/nlines);print;}' $proffile >> $tmpfile
							echo -e "\n" >> $tmpfile
						done # FOR EACH APP
						NCOLUMNS="$(head -n1 $tmpfile | awk -F ' "' 'END{print NF}')"
						echo -n "ploting 'stamp-txcycles-$suffix-$t'..."
						plot-txcycles "$tmpfile" "stamp-txcycles-$suffix-$t" "% dos ciclos" "Transações"
						echo "done."
						rm -f $tmpfile
					done # FOR EACH NTHREAD
				done # FOR EACH SUFFIX
			done # FOR EACH BUILD
			;;
		\?) usage && exit -1 ;;
	esac
}

genFalseConfData=false

while getopts "c:b:d:m:D:l:s:i:z:u:t:M:H:p:h" opt;
do
	case $opt in
		c) _COLUMN=$OPTARG ;;
		b) _BUILDS=$OPTARG ;;
		d) _tinySTM_DESIGNS=$OPTARG ;;
		m) _tinySTM_CMS=$OPTARG ;;
		D) _rtm_CMS=$OPTARG ;;
		l) _tsx_LOCKS=$OPTARG ;;
		s) _STAMP_APPS=$OPTARG ;;
		i) _MICROBENCH_APPS=$OPTARG ;;
		z) _INITSIZES=$OPTARG ;;
		u) _UPDATERATES=$OPTARG ;;
		t) _NTHREADS=$OPTARG ;;
		M) _MEMALLOCS=$OPTARG ;;
		H) _ORT_HASHES=$OPTARG ;;
		p) PLOTSTYLE=$OPTARG ;;
		h) usage && exit -1 ;;
		\?) echo $0" : error - invalid option -- $OPTARG"
			exit 1
	esac
done

[[ -z "$_STAMP_APPS" && -z "$_MICROBENCH_APPS" ]] \
	&& echo "error: no app specified to be executed" && exit -1

[ -z "$_COLUMN" ] && exit -1

plot
