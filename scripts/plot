#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1
source $PWD/scripts/genPlotData

function plot-stamp {
	tmpdatafile=$1
	graphfilename=$2
	ylabel=$3
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "black"
		set style line 2 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#8C1717" #scarlet
		set style line 3 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#EE7621" #chocolate2
		set style line 4 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#99CC32" #yellowgreen
		set style line 5 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#00688B" #deepskyblue4
		set style line 6 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#8B6969" #rosybrown4
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set ylabel "$ylabel" offset 1.8
		set xlabel "  " offset 1

		apps = "$_STAMP_APPS"
		set for[i=1:words(apps)] label word(apps,i) at (2*i-1)*2.5, graph -0.12 center

		plot for[j=2:$NCOLUMNS:2] "$tmpdatafile" index 0 u 1:j:xtic(1) w lp ls j/2 t column(j) , \
		for[i=1:words(apps)-1] for[j=2:$NCOLUMNS:2] "$tmpdatafile" index i u (5*i + column(0)):j:xtic(1) w lp ls j/2 notitle
																	
		set terminal pop
		set output
	EOF
}

function plot-txcycles {
	tmpdatafile=$1
	graphfilename=$2
	ylabel=$3
	xlabel=$4
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "black"
		set style line 2 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#8C1717" #scarlet
		set style line 3 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#EE7621" #chocolate2
		set style line 4 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#99CC32" #yellowgreen
		set style line 5 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#00688B" #deepskyblue4
		set style line 6 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#8B6969" #rosybrown4
		set style line 7 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#2F4F4F" #darkslategrey
		set style line 8 lt 1 lw 5.0 pt 7 ps 1.0 lc rgb "#CD5C5C" #indianred
		
		#set xtics out nomirror
		unset xtics
		set ytics out nomirror
		set grid y
		unset key

		set ylabel "$ylabel" offset 1.8
		set xlabel "$xlabel" offset 0,-1.5
		#set xlabel " " offset 1

		apps = "$_STAMP_APPS"
		set for[i=1:words(apps)] label word(apps,i) at (2*i-1)*2.95,-5.00 center

		#plot for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):2:xtic(sprintf("%d",column(0))) w lp ls j+1 notitle
		plot for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):2 w lp ls j+1 notitle, \
		     for[j=0:words(apps)-1] "$tmpdatafile" index j u (\$1 + 6*j):(\$2 > 20.0 ? (\$2 + 5.0) :1/0):(sprintf("%0.2f",\$3)) w labels

		set terminal pop
		set output
	EOF
}

function plot-stamp-bar {
	tmpdatafile=$1
	graphfilename=$2
	ylabel=$3
	gnuplot <<-EOF
		set encoding utf8
		set terminal postscript eps enhanced color size 9.60,2.80 font "NimbusSanL-Bold,16"
		set output '$GRAPHDIR/$graphfilename.eps'
	
		# estilo das linhas
		set style line 1 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "black"
		set style line 2 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#8C1717" #scarlet
		set style line 3 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#EE7621" #chocolate2
		set style line 4 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#99CC32" #yellowgreen
		set style line 5 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#00688B" #deepskyblue4
		set style line 6 lt 1 lw 1.0 pt 7 ps 1.0 lc rgb "#8B6969" #rosybrown4
		
		set style data histogram
		set style histogram cluster gap 1
		set style fill solid border -1
		set boxwidth 0.9
		set style fill solid border -1
		
		set xtics out nomirror
		set ytics out nomirror
		set grid y

		set tmargin 1.5
		$KEY_POSITION
		set ylabel "$ylabel" offset 1.8
		set xlabel "  " offset 1

		apps = "$_STAMP_APPS"
		set for[i=1:words(apps)] label word(apps,i) at (2*i-1)*3.0 - 1.6, graph -0.12 center

		plot newhistogram, for[j=2:$NCOLUMNS:2] "$tmpdatafile" index 0 u j:xtic(1) ls j/2 \
			$(APPS=$(echo $_STAMP_APPS | sed 's|^[a-z]\+ ||'); i=1;
				for app in $APPS; do
					echo -n 'notitle, newhistogram, for[j=2:'$NCOLUMNS':2] "'$tmpdatafile'" index '$i' u j:xtic(1) ls j/2 ';
					i=$((i+1))
				done
				echo -n 't column(j)'
			)

		set terminal pop
		set output
	EOF
}

function plot {
	
	[ -d $GRAPHDIR ] || mkdir $GRAPHDIR
	
	test -z "$_BUILDS"           && _BUILDS=$BUILDS
	test -z "$_NTHREADS"         && _NTHREADS=$NTHREADS
	test -z "$_STAMP_APPS"       && _STAMP_APPS=$STAMP_APPS
	test -z "$_MEMALLOCS"        && _MEMALLOCS='ptmalloc'
	test "$_MEMALLOCS" == "ALL"  && _MEMALLOCS=$MEMALLOCS
	test -z "$_GOVERNORS"        && _GOVERNORS='ondemand'
	test "$_GOVERNORS" == "ALL"  && _GOVERNORS=$GOVERNORS
	test -z "$_tinySTM_DESIGNS"  && _tinySTM_DESIGNS=$tinySTM_DESIGNS
	test -z "$_tinySTM_CMS"      && _tinySTM_CMS=$tinySTM_CMS
	test -z "$_ORT_HASHES"       && _ORT_HASHES="ORIGINAL"
	test "$_ORT_HASHES" == "ALL" && _ORT_HASHES=$ORT_HASHES
	test -z "$_rtm_CMS"          && _rtm_CMS=$rtm_CMS
	test -z "$_tsx_LOCKS"        && _tsx_LOCKS=$tsx_LOCKS

	case $PLOTSTYLE in
		stamp-TimeAndSpeedupAndEnergy)
			tmpspeedupfile="speedup.tmp"
			tmptimefile="time.tmp"
			tmpenergyfile="energy.tmp"
			generate_data
			for suffix in ${SUFFIXES}; do
				[ "$suffix" == '@' ] && suffix=''
				rm -f $tmpspeedupfile
				rm -f $tmptimefile
				rm -f $tmpenergyfile
				for prefix in ${PREFIXES}; do
					cat $DATADIR/${prefix}${suffix}.speedup >> $tmpspeedupfile
					cat $DATADIR/${prefix}${suffix}.time    >> $tmptimefile
					cat $DATADIR/${prefix}${suffix}.energy  >> $tmpenergyfile
					echo -e "\n" >> $tmpspeedupfile
					echo -e "\n" >> $tmptimefile
					echo -e "\n" >> $tmpenergyfile
				done # FOR EACH PREFIX
				NCOLUMNS="$(head -n1 $tmpspeedupfile | awk -F ' "' 'END{print NF}')"
				KEY_POSITION="set key right nobox"
				prefix=$(echo $prefix | sed 's|^[a-z]\+-\?||')
				plot-stamp "$tmpspeedupfile" "stamp-speedup${prefix}${suffix}" "Speedup (relação ao sequencial)"
				plot-stamp "$tmptimefile"    "stamp-time${prefix}${suffix}"    "Tempo de Execução"
				plot-stamp "$tmpenergyfile"  "stamp-energy${prefix}${suffix}"  "Energia (J) (normalizada)"
				plot-stamp-bar "$tmpspeedupfile" "stamp-bar-speedup${prefix}${suffix}" "Speedup (relação ao sequencial)"
				plot-stamp-bar "$tmptimefile"    "stamp-bar-time${prefix}${suffix}"    "Tempo de Execução"
				plot-stamp-bar "$tmpenergyfile"  "stamp-bar-energy${prefix}${suffix}"  "Energia (J) (normalizada)"
				rm -f $tmpspeedupfile
				rm -f $tmptimefile
				rm -f $tmpenergyfile
			done # FOR EACH SUFFIX
			;;
		tinystm-falseConflict)
			tmpfalseConflictfile="falseConflict.tmp"
			tmpfalseConfRatiofile="falseConfRatio.tmp"
			genFalseConfData=true
			generate_data
			for suffix in ${SUFFIXES}; do
				[ "$suffix" == '@' ] && suffix=''
				rm -f $tmpfalseConflictfile
				rm -f $tmpfalseConfRatiofile
				for prefix in ${PREFIXES}; do
					cat $DATADIR/${prefix}${suffix}.falseConflict  >> $tmpfalseConflictfile
					cat $DATADIR/${prefix}${suffix}.falseConfRatio >> $tmpfalseConfRatiofile
					echo -e "\n" >> $tmpfalseConflictfile
					echo -e "\n" >> $tmpfalseConfRatiofile
				done # FOR EACH PREFIX
				NCOLUMNS="$(head -n1 $tmpfalseConflictfile | awk -F ' "' 'END{print NF}')"
				KEY_POSITION="set key outside right nobox horizontal"
				prefix=$(echo $prefix | sed 's|^[a-z]\+-\?||')
				plot-stamp-bar "$tmpfalseConflictfile"  "stamp-falseConflict${prefix}${suffix}"  "N. Conflitos Falsos"
				plot-stamp-bar "$tmpfalseConfRatiofile" "stamp-falseConfRatio${prefix}${suffix}" "% Conflitos Falsos"
				rm -f $tmpfalseConflictfile
				rm -f $tmpfalseConfRatiofile
			done # FOR EACH SUFFIX
			;;
		stamp-aborts)
			echo "not implemented yet!" && exit -1
			;;
		stamp-txcycles)
			tmpfile=commits.tmp
			for build in ${_BUILDS}; do
				SUFFIXES=$build
				test $build == 'tinystm' && \
					SUFFIXES="$(eval echo -n $build-{${_tinySTM_DESIGNS// /,}}-{${_tinySTM_CMS// /,}} | sed 's|{||g;s|}||g')"
				test $build == 'rtm' && \
					SUFFIXES="$(eval echo -n $build-{${_rtm_CMS// /,}}-{${_tsx_LOCKS// /,}} | sed 's|{||g;s|}||g')"
				SUFFIXES="$(eval echo -n {${SUFFIXES// /,}}-{${_GOVERNORS// /,}} | sed 's|{||g;s|}||g')"
				SUFFIXES="$(eval echo -n {${SUFFIXES// /,}}-{${_MEMALLOCS// /,}} | sed 's|{||g;s|}||g')"
				for suffix in ${SUFFIXES}; do
					for t in ${_NTHREADS}; do
						rm -f $tmpfile
						for app in $STAMP_APPS; do
							proffile="$DATADIR/$app-$suffix-$t.prof"
							if [ ! -e $proffile ]; then
								colselection="5p;3p"
								[ "$build" == "rtm" ] && colselection="7p;3p"
								./scripts/genPlotData2 -p colselection -c $colselection -a $app -s "$suffix-$t"
							fi
							nlines=$(wc -l $proffile | cut -d' ' -f1)
							awk -v nlines=$nlines '{$1=($1+1)*(5/nlines);print;}' $proffile >> $tmpfile
							echo -e "\n" >> $tmpfile
						done # FOR EACH APP
						NCOLUMNS="$(head -n1 $tmpfile | awk -F ' "' 'END{print NF}')"
						echo -n "ploting 'stamp-txcycles-$suffix-$t'..."
						plot-txcycles "$tmpfile" "stamp-txcycles-$suffix-$t" "% dos ciclos" "Transações"
						echo "done."
						rm -f $tmpfile
					done # FOR EACH NTHREAD
				done # FOR EACH SUFFIX
			done # FOR EACH BUILD
			;;
		\?) usage && exit -1 ;;
	esac
}

genFalseConfData=false

while getopts "c:b:d:m:D:l:a:t:g:M:H:p:h" opt;
do
	case $opt in
		c) _COLUMN=$OPTARG ;;
		b) _BUILDS=$OPTARG ;;
		d) _tinySTM_DESIGNS=$OPTARG ;;
		m) _tinySTM_CMS=$OPTARG ;;
		D) _rtm_CMS=$OPTARG ;;
		l) _tsx_LOCKS=$OPTARG ;;
		a) _STAMP_APPS=$OPTARG ;;
		t) _NCORES=$OPTARG ;;
		g) _GOVERNORS=$OPTARG ;;
		M) _MEMALLOCS=$OPTARG ;;
		H) _ORT_HASHES=$OPTARG ;;
		p) PLOTSTYLE=$OPTARG ;;
		h) usage && exit -1 ;;
		\?) echo $0" : error - invalid option -- $OPTARG"
			exit 1
	esac
done

[ -z "$_COLUMN" ] && usage && exit -1
plot
