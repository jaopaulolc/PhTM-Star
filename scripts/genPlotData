#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1

meanScript='BEGIN{
	sum=0
	i=0
	ntype=normtype
	nval=normval
}{
	sum+=$1
	v[i]=$1
	i++
}
END{
	mean=sum/NR
	dp=0
	for(i=0;i<NR;i++)
		dp+=(mean-v[i])*(mean-v[i])
	dp=sqrt(dp/(NR-1))
	confint=0.98*(dp/sqrt(NR))
	if (ntype == 1){
		# speedup
		mean = nval / mean
		confint = confint / nval
	} else if (ntype == 2) {
		# energy normalized
		mean = mean / nval
		confint = confint / nval
	}
	printf "%.3lf %.3lf ", mean, confint
}'

function getNormVal {

	regex=$1
	OIFS=$IFS
	IFS='-'
	tokens=( $2 )
	IFS=$OIFS


	n=$(echo ${tokens[@]} | wc -w)
	app=${tokens[0]}
	mem=${tokens[$n-1]}
	gov=${tokens[$n-2]}

	log="$LOGDIR/$app-seq-$gov-$mem-1.log"

	echo $(grep -e "$regex" $log | awk '{print $3}' | \
		awk -v normtype=0 "$meanScript")
}


function genSpeedupEnergyData {
	
	for prefix in ${PREFIXES}; do
		for suffix in ${SUFFIXES}; do
			[ "$suffix" == '@' ] && suffix=''
			speedupdata=$DATADIR/${prefix}${suffix}.speedup
			timedata=$DATADIR/${prefix}${suffix}.time
			energydata=$DATADIR/${prefix}${suffix}.energy
			echo "generating '$speedupdata' and"
			echo -n "'$energydata' ..."
			echo "$HEADER" > $speedupdata
			echo "$HEADER" > $timedata
			echo "$HEADER" > $energydata
			for t in ${_NTHREADS}; do
				echo -n "$t " >> $speedupdata
				echo -n "$t " >> $timedata
				echo -n "$t " >> $energydata
				for column in ${COLUMNS}; do
					logfile="$LOGDIR/${prefix}${column}${suffix}-$t.log"
					timenormval="$(getNormVal '^Time[ ]\+= ' ${prefix}${column}${suffix} | awk '{print $1}')"
					energynormval="$(getNormVal '^Energy[ ]\+= ' ${prefix}${column}${suffix} | awk '{print $1}')"
					grep -e '^Time[ ]\+= ' $logfile | awk '{print $3}' | \
						awk -v normtype=1 -v normval=$timenormval "$meanScript" >> $speedupdata
					grep -e '^Time[ ]\+= ' $logfile | awk '{print $3}' | \
						awk -v normtype=2 -v normval=1.0 "$meanScript" >> $timedata
					grep -e '^Energy[ ]\+= ' $logfile | awk '{print $3}' | \
						awk -v normtype=2 -v normval=$energynormval "$meanScript" >> $energydata
				done
				echo >> $speedupdata
				echo >> $timedata
				echo >> $energydata
			done
			echo "done."
		done
	done
}

function genFalseConflictData {

	for prefix in ${PREFIXES}; do
		for suffix in ${SUFFIXES}; do
			[ "$suffix" == '@' ] && suffix=''
			falseConflictFile="$DATADIR/${prefix}${suffix}.falseConflict"
			falseConfRatioFile="$DATADIR/${prefix}${suffix}.falseConfRatio"
			echo "generating '$falseConflictFile' and"
			echo -n -e "  '$falseConfRatioFile'..."
			echo "$HEADER" >> $falseConflictFile
			echo "$HEADER" >> $falseConfRatioFile
			for t in ${_NTHREADS}; do
				echo -n "$t " >> $falseConflictFile
				echo -n "$t " >> $falseConfRatioFile
				for column in ${COLUMNS}; do
					logfile="$LOGDIR/${prefix}${column}${suffix}-$t.log"
					grep -e '^nb_total_conflicts:' $logfile | awk '{print $2}' | \
						awk -v normtype=2 -v normval=1.0 "$meanScript" >> $falseConflictFile
					grep -e '^nb_total_conflicts:' $logfile | awk '{print($2 == 0.00) ? 0.00 : ($5/$2)*100.0 }' | \
						awk -v normtype=2 -v normval=1.0 "$meanScript" >> $falseConfRatioFile
				done # FOR EACH COLUMN
				echo >> $falseConflictFile
				echo >> $falseConfRatioFile
			done # FOR EACH NTHREADS
			echo ' done.'
		done # FOR EACH SUFFIX
	done # FOR EACH PREFIX
}

function generate_data {

	[ -d $DATADIR ] || mkdir $DATADIR
	

	perBuildData=true;
	case $_COLUMN in
		BUILDS | GOVERNORS | MEMALLOCS)
			perBuildData=false ;;
	esac
	
	if [ $perBuildData == false ]; then
		TMP=''
		for build in ${_BUILDS}; do
			case $build in
				tinystm)
					TMP="$TMP $(cross_product $build "$_tinySTM_DESIGNS" "$_tinySTM_CMS" "$_ORT_HASHES")" ;;
				rtm)
					TMP="$TMP $(cross_product $build "$_rtm_CMS" "$_tsx_LOCKS")" ;;
				hle)
					TMP="$TMP $build" ;;
				lock)
					TMP="$TMP $build" ;;
			esac
		done
		_BUILDS="$(echo -n $TMP | sed 's|^ ||')"
		AUX=('_BUILDS' '_GOVERNORS' '_MEMALLOCS')
	else
		case $_BUILDS in
			tinystm)
				AUX=('_BUILDS' '_tinySTM_DESIGNS' '_tinySTM_CMS' '_ORT_HASHES') ;;
			rtm)
				AUX=('_BUILDS' '_rtm_CMS' '_tsx_LOCKS') ;;
		esac
	fi
	
	column="_${_COLUMN}"
	for column in ${!column}; do
		COLUMNS="${COLUMNS} -$column"
	done
	for h in $COLUMNS; do
		h="$(echo $h | sed 's|^|"|;s|$|"|;s|"-|"|g;s|-| |g;s|_| |g')"
		HEADER="${HEADER}$h $h "
	done
	HEADER="- ${HEADER}"
	
	i=0
	PREFIXES="${_STAMP_APPS}"
	while [ ! -z "${AUX[$i]}" -a "_$_COLUMN" != "${AUX[$i]}" ]; do
		PREFIXES="$(cross_product "${PREFIXES}" "${!AUX[$i]}")"
		i=$((i+1))
	done
	i=$((i+1))
	
	SUFFIXES=''
	while [ ! -z "${AUX[$i]}" ]; do
		SUFFIXES="$(cross_product "${SUFFIXES}" "${!AUX[$i]}")"
		i=$((i+1))
	done
	
	if [ $perBuildData == true ]; then
		SUFFIXES="$(cross_product "${SUFFIXES}" "${_GOVERNORS}" "${_MEMALLOCS}")"
	fi
	
	[ -z "$SUFFIXES" ] && SUFFIXES='@'

	if [ $genFalseConfData == true ]; then
		genFalseConflictData
	else
		genSpeedupEnergyData
	fi

}
