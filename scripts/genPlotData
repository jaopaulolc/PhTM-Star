#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1

meanScript='BEGIN{
	sum=0
	i=0
	ntype=normtype
	nval=normval
}{
	sum+=$1
	v[i]=$1
	i++
}
END{
	mean=sum/NR
	dp=0
	for(i=0;i<NR;i++)
		dp+=(mean-v[i])*(mean-v[i])
	dp=sqrt(dp/(NR-1))
	confint=0.98*(dp/sqrt(NR))
	if (ntype == 1){
		# speedup
		mean = nval / mean
		confint = confint / nval
	} else if (ntype == 2) {
		# energy normalized
		mean = mean / nval
		confint = confint / nval
	}
	printf "%.3lf %.3lf ", mean, confint
}'

function getNormVal {

	local regex=$1
	OIFS=$IFS
	IFS='-'
	local tokens=( $2 )
	IFS=$OIFS


	local n=$(echo ${tokens[@]} | wc -w)
	local app=${tokens[0]}
	local mem=${tokens[$n-2]}

	local log="$LOGDIR/$app-seq-$mem-1.log"

	echo $(grep -e "$regex" $log | awk '{print $3}' | \
		awk -v normtype=0 "$meanScript")
}


function genDataFile {
	
	case $datafile in
		speedup)
			local datafileregex='^Time[ ]\+= '
			local colawkregex='{print $3}'
			local hasNormVal=1
			local normtype=1 ;;
		energy)
			local datafileregex='^Energy[ ]\+= '
			local colawkregex='{print $3}'
			local hasNormVal=1
			local normtype=2 ;;
		time)
			local datafileregex='^Time[ ]\+= '
			local colawkregex='{print $3}'
			local hasNormVal=0
			local normtype=3 ;;
		throughput)
			local datafileregex='^#txs[ ]\+: '
			local colawkregex='{print $3}'
			local hasNormVal=0
			local normtype=3 ;;
		commits)
			local datafileregex='^#commits[ ]\+: '
			local colawkregex='{print $3}'
			local hasNormVal=0
			local normtype=3 ;;
		conflicts)
			local datafileregex='^#conflicts[ ]\+: '
			local colawkregex='{print $3}'
			local hasNormVal=0
			local normtype=3 ;;
		falseConflict)
			local datafileregex='^nb_total_conflicts:'
			local colawkregex='{print $2}'
			local hasNormVal=0
			local normtype=3 ;;
		falseConfRatio)
			local datafileregex='^nb_total_conflicts:'
			local colawkregex='{print($2 == 0.00) ? 0.00 : ($5/$2)*100.0 }'
			local hasNormVal=0
			local normtype=3 ;;
	esac
	
	for prefix in ${PREFIXES}; do
		case $prefix in
			intset_*)
				SUFFIXES="$INTSET_SUFFIXES" ;;
			conflict*)
				SUFFIXES="$CONFLICT_SUFFIXES" ;;
		esac
		for suffix in ${SUFFIXES}; do
			local datafilename=$DATADIR/${prefix}${suffix}.$datafile
			echo -n "generating '$datafilename'..."
			echo "$HEADER" > $datafilename
			for row in ${_ROWS}; do
				echo -n "$row " >> $datafilename
				for column in ${COLUMNS}; do
					local logfilename="$LOGDIR/${prefix}${column}$(sed 's|@|'$row'|' <<<$suffix).log"
					[[ $hasNormVal != 0 ]] && \
						local normval="$(getNormVal "$datafileregex" ${prefix}${column}${suffix} | awk '{print $1}')"
					grep -e "$datafileregex" $logfilename | awk "$colawkregex" | \
						awk -v normtype=$normtype -v normval=$normval "$meanScript" >> $datafilename
				done
				echo >> $datafilename
			done
			echo "done."
		done
	done
}

#function genFalseConflictData {
#
#	for prefix in ${PREFIXES}; do
#		for suffix in ${SUFFIXES}; do
#			[ "$suffix" == '@' ] && suffix=''
#			falseConflictFile="$DATADIR/${prefix}${suffix}.falseConflict"
#			falseConfRatioFile="$DATADIR/${prefix}${suffix}.falseConfRatio"
#			echo "generating '$falseConflictFile' and"
#			echo -n -e "  '$falseConfRatioFile'..."
#			echo "$HEADER" >> $falseConflictFile
#			echo "$HEADER" >> $falseConfRatioFile
#			for t in ${_NTHREADS}; do
#				echo -n "$t " >> $falseConflictFile
#				echo -n "$t " >> $falseConfRatioFile
#				for column in ${COLUMNS}; do
#					logfile="$LOGDIR/${prefix}${column}${suffix}-$t.log"
#					grep -e '^nb_total_conflicts:' $logfile | awk '{print $2}' | \
#						awk -v normtype=2 -v normval=1.0 "$meanScript" >> $falseConflictFile
#					grep -e '^nb_total_conflicts:' $logfile | awk '{print($2 == 0.00) ? 0.00 : ($5/$2)*100.0 }' | \
#						awk -v normtype=2 -v normval=1.0 "$meanScript" >> $falseConfRatioFile
#				done # FOR EACH COLUMN
#				echo >> $falseConflictFile
#				echo >> $falseConfRatioFile
#			done # FOR EACH NTHREADS
#			echo ' done.'
#		done # FOR EACH SUFFIX
#	done # FOR EACH PREFIX
#}

function generate_data {

	datafile=$1
	local APPS=${2}
	_APPS=${!APPS}
	local ROWS=${3}
	_ROWS=${!3}

	[ -d $DATADIR ] || mkdir $DATADIR
	
	# backup _BUILDS variable
	local BUILDS_BACKUP="$_BUILDS"

	perBuildData=true;
	case $_COLUMN in
		BUILDS | MEMALLOCS)
			perBuildData=false ;;
	esac

	local AUX=''
	if [ $perBuildData == false ]; then
		local TMP=''
		for build in ${_BUILDS}; do
			case $build in
				tinystm)
					TMP="$TMP $(cross_product $build "$_tinySTM_DESIGNS" "$_tinySTM_CMS" "$_ORT_HASHES")" ;;
				rtm)
					TMP="$TMP $(cross_product $build "$_rtm_CMS" "$_tsx_LOCKS")" ;;
				hle | lock | norec | rh_norec | phased_norec)
					TMP="$TMP $build" ;;
			esac
		done
		_BUILDS="$(echo -n $TMP | sed 's|^ ||')"
		AUX=('_BUILDS' '_MEMALLOCS')
	else
		case $_BUILDS in
			tinystm)
				AUX=('_BUILDS' '_tinySTM_DESIGNS' '_tinySTM_CMS' '_ORT_HASHES') ;;
			rtm)
				AUX=('_BUILDS' '_rtm_CMS' '_tsx_LOCKS') ;;
		esac
	fi
	
	local columns="_${_COLUMN}"
	HEADER=''
	COLUMNS=''
	for column in ${!columns}; do
		COLUMNS="${COLUMNS} -$column"
		h="$(echo $column | sed 's|^|"|;s|$|"|;s|-| |g;s|_| |g')"
		HEADER="${HEADER}$h $h "
	done
	HEADER="- ${HEADER}"
	
	local i=0
	PREFIXES="${_APPS}"
	while [ ! -z "${AUX[$i]}" -a "_$_COLUMN" != "${AUX[$i]}" ]; do
		PREFIXES="$(cross_product "${PREFIXES}" "${!AUX[$i]}")"
		i=$((i+1))
	done
	i=$((i+1))
	
	SUFFIXES=''
	while [ ! -z "${AUX[$i]}" ]; do
		SUFFIXES="$(cross_product "${SUFFIXES}" "${!AUX[$i]}")"
		i=$((i+1))
	done
	
	if [ $perBuildData == true ]; then
		SUFFIXES="$(cross_product "${SUFFIXES}" "${_MEMALLOCS}")"
	fi

	if [ "$APPS" == "_MICROBENCH_APPS" ]; then
		local c='i'
		[ "$ROWS" != "_INITSIZES" ]   && local i="$(sed 's|\([0-9]\+\)|i\1|g' <<<${_INITSIZES})"   && c='u' || i='@'
		[ "$ROWS" != "_UPDATERATES" ] && local u="$(sed 's|\([0-9]\+\)|u\1|g' <<<${_UPDATERATES})" && c='n' || u='@'
		[ "$ROWS" != "_NTHREADS" ]    && local n="$(sed 's|\([0-9]\+\)|n\1|g' <<<${_NTHREADS})" || n='@'
		INTSET_SUFFIXES="$(cross_product "${SUFFIXES}" "$i" "$u" "$n")"
		CONFLICT_SUFFIXES="$(cross_product "${SUFFIXES}" "$u" "$n")"
		_ROWS=$(sed 's|\([0-9]\+\)|'$c'\1|g' <<<${!ROWS})
	else
		SUFFIXES="$(cross_product "${SUFFIXES}" '@')"
	fi
	
	# restore _BUILDS variable
	_BUILDS="$BUILDS_BACKUP"
	
	genDataFile
}
