#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1

function usage {
	
	echo $0' [-d <tinySTM DESIGN>]  [-m <tinySTM CM>] [-H <ORT hash>] [-a <stamp app>] [-D <RTM CM>]'
	echo -e '\t[-l <TSX lock>] [-t <n. threads>] [-n <nb executions>] [-b <build>] [-M <memalloc>] [-g <governor>]'

	echo
	echo '-d <tinySTM DESIGN>'
	echo "${tinySTM_DESIGNS// / | }"
	echo 'default = ALL'

	echo
	echo '-m <tinySTM CM>'
	echo "${tinySTM_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-H <ORT hash>'
	echo "${ORT_HASHES// / | }"
	echo 'default = ORIGINAL'
	
	echo
	echo '-D <RTM CM>'
	echo "${rtm_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-l <TSX lock>'
	echo "${tsx_LOCKS// / | }"
	echo 'default = ALL'

	echo
	echo '-a <stamp app>'
	echo "${STAMP_APPS// / | }"
	echo 'default = ALL'

	echo
	echo '-b <build>'
	echo "${BUILDS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-M <memalloc>'
	echo "${MEMALLOCS// / | }"
	echo 'default = ptmalloc'
	
	echo
	echo '-g <governor>'
	echo "${GOVERNORS// / | }"
	echo 'default = ondemand'

	echo
	echo '-t <n. threads>'
	echo '1 | 2 | 4 | etc... | "1 2 4 8" | "4 8 16" | etc...'
	echo 'default = "1 2 3 4"'

	echo
	echo '-n <n. executions>'
	echo 'default = 20'
}

function setGovernor {
	
	governor=$1
	for processor in $(cat /proc/cpuinfo | grep processor | awk '{print $3}');
	do
		sudo cpufreq-set -c $processor -g $governor
		test $governor == 'userspace' && sudo cpufreq-set -c $processor -f ${!governor}
	done
}

function restoreGovernor {

	governor='ondemand'
	for processor in $(cat /proc/cpuinfo | grep processor | awk '{print $3}');
	do
		sudo cpufreq-set -c $processor -g $governor
	done
}

function execute {

	test -e $LOGDIR || mkdir -p $LOGDIR
	
	test -z "$_BUILDS"           && _BUILDS=$BUILDS
	test -z "$_NEXEC"            && _NEXEC=$NEXEC
	test -z "$_NTHREADS"         && _NTHREADS=$NTHREADS
	test -z "$_MEMALLOCS"        && _MEMALLOCS='ptmalloc'
	test "$_MEMALLOCS" == "ALL"  && _MEMALLOCS=$MEMALLOCS
	test -z "$_GOVERNORS"        && _GOVERNORS='ondemand'
	test "$_GOVERNORS" == "ALL"  && _GOVERNORS=$GOVERNORS
	test -z "$_tinySTM_DESIGNS"  && _tinySTM_DESIGNS=$tinySTM_DESIGNS
	test -z "$_tinySTM_CMS"      && _tinySTM_CMS=$tinySTM_CMS
	test -z "$_ORT_HASHES"       && _ORT_HASHES='ORIGINAL'
	test "$_ORT_HASHES" == "ALL" && _ORT_HASHES=$ORT_HASHES
	test -z "$_STAMP_APPS"       && _STAMP_APPS=$STAMP_APPS
	test -z "$_rtm_CMS"          && _rtm_CMS=$rtm_CMS
	test -z "$_tsx_LOCKS"        && _tsx_LOCKS=$tsx_LOCKS
	
	echo 'starting execution...'

	for app in ${_STAMP_APPS}; do
		eval exec_flags=\$EXEC_FLAG_$app
		for build in $_BUILDS; do
			SUFFIXES=$build
			[ $build == 'tinystm' ] && \
				SUFFIXES="$(cross_product $build "${_tinySTM_DESIGNS}" "${_tinySTM_CMS}" "${_ORT_HASHES}")"
			[ $build == 'rtm' ] && \
				SUFFIXES="$(cross_product $build "${_rtm_CMS}" "${_tsx_LOCKS}")"
			NUMTHREADS=$_NTHREADS
			[ $build == "seq" ] && NUMTHREADS='1'
			SUFFIXES="$(cross_product "${SUFFIXES}" "${_GOVERNORS}")"
			for suffix in $SUFFIXES; do
				regex='-([a-z]+)$' # regular expression to get governor from suffix variable
				[[ $suffix =~ $regex ]] && governor=${BASH_REMATCH[1]} #&& setGovernor $governor
				appRunPath="$STAMP/$build/$app/$app-$(sed 's/-[a-z]\+$//' <<< $suffix)" # remove governor from suffix
				for memalloc in $_MEMALLOCS; do
					for t in $NUMTHREADS; do
						outputLog="$LOGDIR/$app-$suffix-$memalloc-$t.log"
						rm -f $outputLog
						for j in $(seq 1 ${_NEXEC}); do
							echo "execution $j: $appRunPath ${exec_flags}$t ($memalloc) ($governor)"
							sudo LD_PRELOAD=${!memalloc} ${appRunPath} ${exec_flags}$t  >> $outputLog
						done # FOR EACH EXECUTION
					done # FOR EACH NUMBER OF THREADS
				done # FOR EACH MEMORY ALLOCATOR
				#restoreGovernor # reset system governor to ondemand
			done # FOR EACH SUFFIX
		done # FOR EACH BUILD
	done # FOR EACH APPS

	echo 'execution finished.'
}

while getopts "b:d:m:D:l:a:t:n:g:M:H:h" opt;
do
	case $opt in
		b) _BUILDS=$OPTARG ;;
		d) _tinySTM_DESIGNS=$OPTARG ;;
		m) _tinySTM_CMS=$OPTARG ;;
		D) _rtm_CMS=$OPTARG ;;
		l) _tsx_LOCKS=$OPTARG ;;
		a) _STAMP_APPS=$OPTARG ;;
		t) _NTHREADS=$OPTARG ;;
		n) _NEXEC=$OPTARG ;;
		g) _GOVERNORS=$OPTARG ;;
		M) _MEMALLOCS=$OPTARG ;;
		H) _ORT_HASHES=$OPTARG ;;
		h) usage && exit -1 ;;
		\?) echo $0" : error - invalid option -- $OPTARG"
			exit 1
	esac
done

execute
