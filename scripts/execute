#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1

function usage {
	
	echo $0' <flags below>'

	echo
	echo '-d <tinySTM DESIGN>'
	echo "${tinySTM_DESIGNS// / | }"
	echo 'default = ALL'

	echo
	echo '-m <tinySTM CM>'
	echo "${tinySTM_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-H <ORT hash>'
	echo "${ORT_HASHES// / | }"
	echo 'default = ORIGINAL'
	
	echo
	echo '-D <RTM CM>'
	echo "${rtm_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-l <TSX lock>'
	echo "${tsx_LOCKS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-i <intset app>'
	echo "${INTSET_APPS// / | }"
	echo 'default = NONE'
	
	echo
	echo '-z <initial intset size>'
	echo "${INITSIZES// / | }"
	echo 'default = ALL'
	
	echo
	echo '-u <intset update rate>'
	echo "${UPDATERATES// / | }"
	echo 'default = ALL'

	echo
	echo '-a <stamp app>'
	echo "${STAMP_APPS// / | }"
	echo 'default = NONE'
	
	echo
	echo '-w <app working-set size>'
	echo "${WORK_SIZES// / | }"
	echo 'default = large'

	echo
	echo '-b <build>'
	echo "${BUILDS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-M <memalloc>'
	echo "${MEMALLOCS// / | }"
	echo 'default = ptmalloc'

	echo
	echo '-t <n. threads>'
	echo '1 | 2 | 4 | etc... | "1 2 4 8" | "4 8 16" | etc...'
	echo 'default = "1 2 3 4"'

	echo
	echo '-n <n. executions>'
	echo 'default = 20'
}

function execute_stamp_apps {

	for app in ${_STAMP_APPS}; do
		for work in ${_WORK_SIZES}; do
			eval exec_flags=\$EXEC_FLAG_${app}_$work
			appRunPath="$STAMP/$build/$app/$app-$suffix"
			for t in $NUMTHREADS; do
				outputLog="$LOGDIR/$app-$suffix-$memalloc-$t.log"
				rm -f $outputLog
				for j in $(seq 1 ${_NEXEC}); do
					echo "execution $j: $appRunPath ${exec_flags}$t ($memalloc) ($work)"	
					sudo LD_PRELOAD=${!memalloc} STM_CONFIG=${!build} ${appRunPath} ${exec_flags}$t  >> $outputLog
				done # FOR EACH EXECUTION
			done # FOR EACH NUMBER OF THREADS
		done # FOR EACH WORK SIZE
	done # FOR EACH APPS
}

function execute_microbench_apps {

	local i="$(sed 's|\([0-9]\+\)|i\1|g' <<<${_INITSIZES})"
	local u="$(sed 's|\([0-9]\+\)|u\1|g' <<<${_UPDATERATES})"
	local n="$(sed 's|\([0-9]\+\)|n\1|g' <<<${NUMTHREADS})"

	for app in ${_MICROBENCH_APPS}; do
		appRunPath="$MICROBENCH/$build/$app-$suffix"
		case $app in
			intset_*)
				local EXEC_FLAGS="$(cross_product "$i" "$u" "$n")" ;;
			conflict|capacity)
				local EXEC_FLAGS="$(cross_product "$u" "$n")" ;;
		esac
		for exec_flags in ${EXEC_FLAGS}; do
			outputLog="$LOGDIR/$app-$suffix-$memalloc-${exec_flags}.log"
			rm -f $outputLog
			for j in $(seq 1 ${_NEXEC}); do
				echo "execution $j: $appRunPath -${exec_flags//-/ -} ($memalloc)"	
				sudo LD_PRELOAD=${!memalloc} STM_CONFIG=${!build} ${appRunPath} -${exec_flags//-/ -}  >> $outputLog
			done # FOR EACH EXECUTION
		done # FOR EACH EXEC FLAGS
	done # FOR EACH APPS
}

function execute {

	test -e $LOGDIR || mkdir -p $LOGDIR

	test -z "$_BUILDS"            && _BUILDS=$BUILDS
	test -z "$_NEXEC"             && _NEXEC=$NEXEC
	test -z "$_NTHREADS"          && _NTHREADS=$NTHREADS
	test -z "$_MEMALLOCS"         && _MEMALLOCS='ptmalloc'
	test "$_MEMALLOCS" == "ALL"   && _MEMALLOCS=$MEMALLOCS
	test -z "$_tinySTM_DESIGNS"   && _tinySTM_DESIGNS=$tinySTM_DESIGNS
	test -z "$_tinySTM_CMS"       && _tinySTM_CMS=$tinySTM_CMS
	test -z "$_ORT_HASHES"        && _ORT_HASHES='ORIGINAL'
	test "$_ORT_HASHES" == "ALL"  && _ORT_HASHES=$ORT_HASHES
	test "$_STAMP_APPS" == "ALL"  && _STAMP_APPS=$STAMP_APPS
	test -z "$_WORK_SIZES"        && _WORK_SIZES='large'
	test "$_WORK_SIZES" == "ALL"  && _WORK_SIZES=$WORK_SIZES
	test -z "$_rtm_CMS"           && _rtm_CMS=$rtm_CMS
	test -z "$_tsx_LOCKS"         && _tsx_LOCKS=$tsx_LOCKS
	test "$_MICROBENCH_APPS" == "ALL" && _MICROBENCH_APPS=$MICROBENCH_APPS
	test -z "$_INITSIZES"         && _INITSIZES=$INITSIZES
	test -z "$_UPDATERATES"       && _UPDATERATES=$UPDATERATES
	
	echo 'starting execution...'

	for build in $_BUILDS; do
		SUFFIXES=$build
		[ $build == 'tinystm' ] && \
			SUFFIXES="$(cross_product $build "${_tinySTM_DESIGNS}" "${_tinySTM_CMS}" "${_ORT_HASHES}")"
		[ $build == 'rtm' ] && \
			SUFFIXES="$(cross_product $build "${_rtm_CMS}" "${_tsx_LOCKS}")"
		NUMTHREADS=$_NTHREADS
		[ $build == "seq" ] && NUMTHREADS='1'
		for suffix in $SUFFIXES; do
			for memalloc in $_MEMALLOCS; do
				execute_stamp_apps
				execute_microbench_apps
			done # FOR EACH MEMORY ALLOCATOR
		done # FOR EACH SUFFIX
	done # FOR EACH BUILD

	echo 'execution finished.'
}

while getopts "b:d:m:D:l:s:w:i:z:u:t:n:M:H:h" opt;
do
	case $opt in
		b) _BUILDS=$OPTARG ;;
		d) _tinySTM_DESIGNS=$OPTARG ;;
		m) _tinySTM_CMS=$OPTARG ;;
		D) _rtm_CMS=$OPTARG ;;
		l) _tsx_LOCKS=$OPTARG ;;
		s) _STAMP_APPS=$OPTARG ;;
		w) _WORK_SIZES=$OPTARG ;;
		i) _MICROBENCH_APPS=$OPTARG ;;
		z) _INITSIZES=$OPTARG ;;
		u) _UPDATERATES=$OPTARG ;;
		t) _NTHREADS=$OPTARG ;;
		n) _NEXEC=$OPTARG ;;
		M) _MEMALLOCS=$OPTARG ;;
		H) _ORT_HASHES=$OPTARG ;;
		h) usage && exit -1 ;;
		\?) echo $0" : error - invalid option -- $OPTARG"
			exit 1
	esac
done

[[ -z "$_STAMP_APPS" && -z "$_MICROBENCH_APPS" ]] \
	&& echo "error: no app specified to be executed" && exit -1

execute
