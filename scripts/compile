#!/bin/bash

source $PWD/scripts/scripts.cfg
[ $? != 0 ] && echo -e "\nerror: running scripts from wrong directory!" && exit -1

function usage {
	
	echo $0' [-d <tinySTM DESIGN>]  [-m <tinySTM CM>] [-H ORT hash] [-i <intset app>]'
	echo -e '\t[-b <build>] [-D <RTM CM>]  [-l <TSX lock>] [-s <stamp app>]'

	echo
	echo '-d <tinySTM DESIGN>'
	echo "${tinySTM_DESIGNS// / | }"
	echo 'default = ALL'

	echo
	echo '-m <tinySTM CM>'
	echo "${tinySTM_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-H <ORT hash>'
	echo "${ORT_HASHES// / | }"
	echo 'default = ORIGINAL'
	
	echo
	echo '-D <HTM CM>'
	echo "${HTM_CMS// / | }"
	echo 'default = ALL'
	
	echo
	echo '-l <TSX lock>'
	echo "${TSX_LOCKS// / | }"
	echo 'default = ALL'

	echo
	echo '-s <stamp app>'
	echo "${STAMP_APPS// / | }"
	echo 'default = NONE'
	
	echo
	echo '-i <intset app>'
	echo "${INTSET_APPS// / | }"
	echo 'default = NONE'

	echo
	echo '-b <build>'
	echo "${BUILDS// / | }"
	echo 'default = ALL'
}


function compile_stamp_apps {

	for app in ${_STAMP_APPS}; do
		local APP_SRC_PATH=$STAMP/apps/$app
		local BIN_APP_PATH=$STAMP/$build/$app
		make -C $APP_SRC_PATH -f Makefile \
			TMBUILD=$build clean ${MAKE_OPTIONS} 2> /dev/null
		make -C $APP_SRC_PATH -f Makefile \
			TMBUILD=$build ${MAKE_OPTIONS} 2> /dev/null
		mv $BIN_APP_PATH/$app $BIN_APP_PATH/${app}-${build}${suffix}
		echo -e "\t++ ${app} compiled"
	done # FOR EACH APP
}

function compile_microbench_apps {

	for app in ${_MICROBENCH_APPS}; do
		local APP_SRC_PATH=$MICROBENCH/apps/$(sed 's|_[a-z]\+$||' <<<$app)
		local BIN_APP_PATH=$MICROBENCH/$build
		make -C $APP_SRC_PATH -f Makefile \
			TMBUILD=$build APP=$app clean ${MAKE_OPTIONS} 2> /dev/null
		make -C $APP_SRC_PATH -f Makefile \
			TMBUILD=$build APP=$app ${MAKE_OPTIONS} 2> /dev/null
		mv $BIN_APP_PATH/$app $BIN_APP_PATH/${app}-${build}${suffix}
		echo -e "\t++ ${app} compiled"
	done # FOR EACH APP
}

function compile_with_tinystm {

	test -z "$_tinySTM_DESIGNS"  && _tinySTM_DESIGNS=$tinySTM_DESIGNS
	test -z "$_tinySTM_CMS"      && _tinySTM_CMS=$tinySTM_CMS
	test -z "$_ORT_HASHES"       && _ORT_HASHES="ORIGINAL"
	test "$_ORT_HASHES" == "ALL" && _ORT_HASHES=$ORT_HASHES
			
	for design in ${_tinySTM_DESIGNS}; do
		for cm in ${_tinySTM_CMS}; do
			for ort_hash in ${_ORT_HASHES}; do
				sed -e "/${!design}/s|# ||;/${!cm}/s|# ||" \
						-e "/${ORT_PROFILING}/s|# ||"          \
						-e "/${COMMIT_RATE_PROFILING}/s|# ||"  \
						-e "/${RW_SET_PROFILING}/s|# ||"       \
						-e "/${ort_hash}/s|# ||"      				 \
						$tinySTM/Makefile.template > $tinySTM/Makefile
				touch $tinySTM/Makefile
				make -C $tinySTM clean ${MAKE_OPTIONS}
				make -C $tinySTM ${MAKE_OPTIONS}
				
				suffix=-${design}-${cm}-${ort_hash}
				echo "## tinySTM ${suffix} compiled"
			
				compile_stamp_apps
				compile_microbench_apps
			done # FOR EACH ORT HASH
		done # FOR EACH CM
	done # FOR EACH DESIGN

}

function compile_with_norec {
	
	sed	-e "s|# DUMMY COMMENT||"               \
	    -e "/${COMMIT_RATE_PROFILING}/s|# ||"  \
			-e "/${RW_SET_PROFILING}/s|# ||"       \
			$NOrec/Makefile.template > $NOrec/Makefile
	make -C $NOrec clean ${MAKE_OPTIONS}
	make -C $NOrec ${MAKE_OPTIONS}
	echo "## ${!build} STM compiled"
	suffix=""
	compile_stamp_apps
	compile_microbench_apps
}

function compile_with_rtm {

	test -z "$_HTM_CMS"         && _HTM_CMS='glock'
	test "$_HTM_CMS" == "ALL"   && _HTM_CMS=$HTM_CMS
	test -z "$_TSX_LOCKS"       && _TSX_LOCKS='simple_lock'
	test "$_TSX_LOCKS" == "ALL" && _TSX_LOCKS=$TSX_LOCKS
				
	for cm in ${_HTM_CMS}; do
		for lock in ${_TSX_LOCKS}; do
			sed -e "/# DEFINES += -D${lock^^}/s|# ||"  \
					-e "/${!cm}/s|# ||"                    \
					$HTM/Makefile.template > $HTM/Makefile
			touch $HTM/Makefile
			make -C $HTM clean ${MAKE_OPTIONS}
			make -C $HTM ${MAKE_OPTIONS}
			
			suffix=-${cm}-${lock}
			echo "## RTM ${suffix} compiled"
			
			compile_stamp_apps
			compile_microbench_apps
			rm -f $HTM/Makefile
		done # FOR EACH LOCK
	done #FOR EACH CM

}

function compile_with_powerTM {

	test -z "$_HTM_CMS"         && _HTM_CMS='glock'
	test "$_HTM_CMS" == "ALL"   && _HTM_CMS=$HTM_CMS
				
	for cm in ${_HTM_CMS}; do
		lock=simple_lock
		sed -e "/# DEFINES += -D${lock^^}/s|# ||"  \
				-e "/${!cm}/s|# ||"                    \
				$HTM/Makefile.template > $HTM/Makefile
		touch $HTM/Makefile
		make -C $HTM clean ${MAKE_OPTIONS}
		make -C $HTM ${MAKE_OPTIONS}
		
		suffix=-${cm}-${lock}
		echo "## powerTM ${suffix} compiled"
		
		compile_stamp_apps
		compile_microbench_apps
		rm -f $HTM/Makefile
	done #FOR EACH CM

}

function compile_with_hle {
	
	suffix=""
	echo "## HLE compiled"
	compile_stamp_apps
	compile_microbench_apps
}

function compile_with_lock {
	
	suffix=""
	echo "## LOCK compiled"
	compile_stamp_apps
	compile_microbench_apps
}

function compile_seq {
	
	suffix=""
	echo "## SEQ compiled"
	compile_stamp_apps
	compile_microbench_apps
}

function compile {
	
	echo 'starting compilation...'

	if [ $(uname -m) == "x86_64" ];  then
		make -C $MSRDIR clean $MAKE_OPTIONS && make -C $MSRDIR $MAKE_OPTIONS
	fi

	test -z "$_BUILDS"                && _BUILDS=$BUILDS
	test "$_STAMP_APPS" == "ALL"      && _STAMP_APPS=$STAMP_APPS
	test "$_MICROBENCH_APPS" == "ALL" && _MICROBENCH_APPS=$MICROBENCH_APPS

	for build in $_BUILDS; do
		case $build in
			seq)
				compile_seq
				;;
			tinystm)
				compile_with_tinystm
				;;
			norec)
				compile_with_norec
				;;
			rh_norec)
				compile_with_norec
				;;
			phased_norec)
				compile_with_norec
				;;
			rtm)
				compile_with_rtm
				;;
			hle)
				compile_with_hle
				;;
			powerTM)
				compile_with_powerTM
				;;
			lock)
				compile_with_lock
				;;
			\?)
				echo "error: unkown build '$build'!"
				exit -1
				;;
		esac
	done
	
	echo 'compilation finished.'
}

while getopts "b:d:m:D:l:s:i:P:H:h" opt;
do
	case $opt in
		b) _BUILDS=$OPTARG ;;
		d) _tinySTM_DESIGNS=$OPTARG ;;
		m) _tinySTM_CMS=$OPTARG ;;
		D) _HTM_CMS=$OPTARG ;;
		l) _TSX_LOCKS=$OPTARG ;;
		s) _STAMP_APPS=$OPTARG ;;
		i) _MICROBENCH_APPS=$OPTARG ;;
		P) case $OPTARG in
		     ORT_PROFILING)
				 	ORT_PROFILING='# DEFINES += -DORT_PROFILING' ;;
				 TSX_ABORT_PROFILING)
				 	MAKE_OPTIONS="$MAKE_OPTIONS PROFILING=TSX_ABORT_PROFILING" ;;
				 COMMIT_RATE_PROFILING)
				 	COMMIT_RATE_PROFILING='# DEFINES += -DCOMMIT_RATE_PROFILING' 
				 	MAKE_OPTIONS="$MAKE_OPTIONS PROFILING=COMMIT_RATE_PROFILING" ;;
				 RW_SET_PROFILING)
				 	RW_SET_PROFILING='# DEFINES += -DRW_SET_PROFILING' 
				 	MAKE_OPTIONS="$MAKE_OPTIONS PROFILING=RW_SET_PROFILING" ;;
				 [0-9])
				 	MAKE_OPTIONS="$MAKE_OPTIONS PROFILING=$OPTARG" ;;
				 *) echo "error: invalid profiling mode '$OPTARG'" && exit -1 ;;
				esac ;;
		H) _ORT_HASHES=$OPTARG ;;
		h) usage && exit -1 ;;
		\?) echo $0" : error - invalid option -- $OPTARG"
			exit 1
	esac
done

[[ -z "$_STAMP_APPS" && -z "$_MICROBENCH_APPS" ]] \
	&& echo "error: no app specified to be compiled" && exit -1

compile
